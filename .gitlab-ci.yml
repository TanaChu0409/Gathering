stages:          # List of stages for jobs, and their order of execution
  - build
  - archtecture-test
  - sonarqube-check

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:6.0
  variables:
    GIT_DEPTH: "0"
  tags:
    - kh_runner
  # when: manual
  script:
    - "dotnet build eGathering.sln"

archtecture-test:   # This job runs in the test stage.
  stage: archtecture-test    # It only starts when the job in the build stage completes successfully.
  image: mcr.microsoft.com/dotnet/sdk:6.0
  variables:
    GIT_DEPTH: "0"
  tags:
    - kh_runner
  # when: manual
  script:
    - "cd ./eGathering.ArchitectureTest"
    - "dotnet test"

sonarqube-check:
  stage: sonarqube-check
  image: mcr.microsoft.com/dotnet/sdk:6.0
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
      - "apt-get update"
      - "apt-get install --yes openjdk-11-jre"
      - "dotnet tool install --global dotnet-sonarscanner"
      - "export PATH=\"$PATH:$HOME/.dotnet/tools\""
      - "dotnet sonarscanner begin /k:\"dotnet-sample-code_ddd-demo_AYpEX1MbXuFwU2qPEZwM\" /d:sonar.login=\"$SONAR_TOKEN\" /d:\"sonar.host.url=$SONAR_HOST_URL\" "
      - "dotnet build eGathering.sln"
      - "dotnet sonarscanner end /d:sonar.login=\"$SONAR_TOKEN\""
  allow_failure: true
  tags:
    - kh_runner
  when: manual
  only:
    - master
